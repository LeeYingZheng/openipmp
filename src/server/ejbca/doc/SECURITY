
EJBCA SECURITY
==============

NOTE!
Security is CRITICAL for a CA. Protection of the CAs private key is esential,
 since compromise of the CAs private key will let anyone issue false
 certificates, which can be used to gain access to systems relying on the CA for
 authentication and other security services.
After realising this, please read on and take a pragmatic approach to security
 suitable for your policy, application and environment.

Configuring for security
------------------------
The easiest way to keep the installation secure is to block all JBOSS ports
 (1099, 1476, 4444, 8082, 8083) from the outside and only allow traffic to
 Tomcat ports (8080).
This is because the public end-user actions can be performed through the public
 servlets, while administration tasks are performed directly on the beans.

See 'ejbcafirewall.sh' for an example how to configure an Iptables firewall in
Linux for protecting EJBCA running on JBoss.

See http://www.jboss.org/online-manual/HTML/ch11s03.html for a list of ports
 used in JBOSS.
See http://www.jboss.org/online-manual/HTML/ch13s84.html for information about
 security in JBOSS/EJB.
See http://www.javaworld.com/javaworld/jw-08-2001/jw-0831-jaas_p.html for more
 examples about setting up role-permissions.
See http://www.jboss.org/online-manual/HTML/ch13s12.html on how to set up SSL
 with JBOSS/Tomcat.

For more advanced security configurations utilizing Bean permissions as defined
 below, security must be activated in JBoss. To activate security in JBoss see
 the JBoss manual at:
http://www.jboss.org/online-manual/HTML/ch09.html

File permission
---------------
The application server should be run as a special user. The PKCS12 file with the
CAs private key should be protected so the ONLY the user running the
application server can access it.

If PKCS12 files are generateed for users, the subdirectory ('p12') where
they are stored and the generated files should be protected in the same way.

BEAN PERMISSIONS
================

Below is a list describing the access permissions that should apply on all beans
 and their methods.
internalUser means that the method should not be available to the public, only
 internally to administrator interfaces and other beans and servlets running on
 the server.

Bean permissions are set in the 'ejb-jar.xml' files.

CA bean
=======

RSASignSession
--------------
CreateCRL() must be protected and should only be possible to run from
 internalUser.
All other methods are public.

AuthenticationSession
---------------------
All methods are protected and can only be accessed from the RSASignSession
 (internalUser).

CertificateStoreSession
-----------------------
storeCertificate() is protected and can only be accessed from internalUser.
storeCRL() is protected and can only be accessed from internalUser.
All other methods are public.

CreateCRLSession
----------------
All methods are protected and can only be accessed from the internalUser, i.e.
 cronjob running timely.

CertificateData
---------------
All methods are protected and can only be accessed from the internalUser.

CRLData
-------
All methods are protected and can only be accessed from the internalUser.

RA bean
=======

UserAdminSession
----------------
All methods are protected and can only be accessed from the internalUser.

UserData
--------
All methods are protected and can only be accessed from the internalUser.

Servlets
========
Servlets are available to the public.

