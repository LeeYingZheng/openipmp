Cannot invoke emptyOrNull() on the primitive type nullSyntax error on token "instanceof", invalid AssignmentOperatornull instanceof VectorValue;VectorValue cannot be resolved to a typeVectorValue cannot be resolved to a typeVector cannot be resolved to a typeVectorValue cannot be resolved to a typeVectorValue cannot be resolved to a typeVector cannot be resolved to a typeSyntax error on token "import", return expectedSyntax error on token "import", return expectedimport com.mutable.drmPlugin.roap.roapImport.VectorValue;VectorValue cannot be resolved to a typeVector cannot be resolved to a typeVectorValue cannot be resolved to a typeVector cannot be resolved to a typeCannot instantiate the type VectorValueThe constructor Vector(int[]) is undefinedCannot instantiate the type VectorValueThe constructor Vector(int[]) is undefinedCannot instantiate the type VectorValueThe constructor Vector(byte[]) is undefinedCannot instantiate the type VectorValueThe constructor Vector(byte[]) is undefinedThe constructor Vector(byte[]) is undefinedThe constructor Vector(byte[]) is undefinedThe method add(int, Object) in the type Vector is not applicable for the arguments (int)com.mutable.drmPlugin.tools.StringVectorValue cannot be resolved to a typeThe method nonEmptyOrNull() is undefined for the type VectorThe method nonEmptyOrNull() is undefined for the type Vectorjava.util.Vector v1 = new java.util.Vector();v1.add("1");java.util.Vector v2 = new java.util.Vector();com.mutable.drmPlugin.tools.StringVector w1 = new com.mutable.drmPlugin.tools.StringVector(v1);com.mutable.drmPlugin.tools.StringVector w2 = new com.mutable.drmPlugin.tools.StringVector(v2);System.out.println(w1.nonEmptyOrNull());System.out.println(w2.nonEmptyOrNull());String resevedChars = return "<>&'"+String.valueOf('"');(java.lang.String) <>&'"Syntax error on token "import", delete this tokenimport com.mutable.drmPlugin.xml.*;The method output() is undefined for the type DocumentHelperThe method output() in the type DocumentHelper is not applicable for the arguments (boolean)The method output() in the type DocumentHelper is not applicable for the arguments (boolean)com.mutable.drmPlugin.xml.FactoryHelper fact = new com.mutable.drmPlugin.xml.FactoryHelper();com.mutable.drmPlugin.xml.DocumentHelper doc = (com.mutable.drmPlugin.xml.DocumentHelper) fact.createDocument("haha");com.mutable.drmPlugin.xml.ElementHelper root = (com.mutable.drmPlugin.xml.ElementHelper) doc.getRootElement();root.addAttribute("isGreat","true");root.getAttributeBooleanValue("isGreat");root.addChildElement("hehe");root.addChildElement("hihi");com.mutable.drmPlugin.xml.ElementHelper first = (com.mutable.drmPlugin.xml.ElementHelper)root.getFirstChild();com.mutable.drmPlugin.xml.ElementHelper next = (com.mutable.drmPlugin.xml.ElementHelper) first.getNextSibling();next.setStringValue("123");root.addChildElement("hehe.hoho","321");//ElementHelper third = (ElementHelper) next.getNextSibling();//return root.getChildElement("hehe.hoho");//return third.getFirstChild().getIntValue();//return third.getIntValue();//return doc.encode();//return doc.output(true);doc.fileOut("haha");String s = "<addDeviceRightsRequest><rights><o-ex:context></o-ex:context><o-ex:agreement><o-ex:asset></o-ex:asset><o-ex:permission>	<o-dd:play><o-ex:constraint><o-dd:datetime><o-dd:start>2006-01-02T00:00:00Z</o-dd:start><o-dd:end>2006-12-31T00:00:00Z</o-dd:end></o-dd:datetime></o-ex:constraint></o-dd:play></o-ex:permission></o-ex:agreement></rights><deviceID><keyIdentifier xsi:type=\"roap:X509SPKIHash\" algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"><hash>UAIW0cQze1cM+gRGXWGTJf6cMkc=</hash></keyIdentifier></deviceID><contentID>dGVzdCBjb250ZW50IDE=</contentID><nonce>bm9uY2Ugb2YgbGVuZ3RoID49IDE0YWE=</nonce></addDeviceRightsRequest>";com.mutable.drmPlugin.xml.DocumentHelper newDoc = (com.mutable.drmPlugin.xml.DocumentHelper) (new com.mutable.drmPlugin.xml.FactoryHelper()).decodeDocument(s);return newDoc.encode();(java.lang.String) <addDeviceRightsRequest><rights><o-ex:context/><o-ex:agreement><o-ex:asset/><o-ex:permission>	<o-dd:play><o-ex:constraint><o-dd:datetime><o-dd:start>2006-01-02T00:00:00Z</o-dd:start><o-dd:end>2006-12-31T00:00:00Z</o-dd:end></o-dd:datetime></o-ex:constraint></o-dd:play></o-ex:permission></o-ex:agreement></rights><deviceID><keyIdentifier algorithm="http://www.w3.org/2000/09/xmldsig#sha1" xsi:type="roap:X509SPKIHash"><hash>UAIW0cQze1cM+gRGXWGTJf6cMkc=</hash></keyIdentifier></deviceID><contentID>dGVzdCBjb250ZW50IDE=</contentID><nonce>bm9uY2Ugb2YgbGVuZ3RoID49IDE0YWE=</nonce></addDeviceRightsRequest>return first.getNextSibling().getName();return first.getName();return root.getAllChildren().getData();Base64String cannot be resolved to a typebyte b[] = {1};return new com.mutable.drmPlugin.tools.Base64String(b).toString();java.io.File theFile = new java.io.File("C:\\dean\\newOma\\OMACACert.der");java.io.FileInputStream is = new java.io.FileInputStream(theFile);java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance("X509");java.security.cert.Certificate cert = cf.generateCertificate(is);return cert.getPublicKey();//return cert.toString();return ((java.security.cert.X509Certificate)cert).checkValidity();An exception occurred during evaluation:  java.security.cert.CertificateExpiredExceptionjava.io.FileOutputStream os = new java.io.FileOutputStream("C:\\dean\\myVersion.der");byte[] buff = cert.getEncoded();os.write(buff);os.close();//sun.security.rsa.RSAKeyPairGenerator gen = new sun.security.rsa.RSAKeyPairGenerator();java.security.KeyPairGenerator gen = java.security.KeyPairGenerator.getInstance("RSA");java.security.SecureRandom sec = new java.security.SecureRandom();gen.initialize(2048,sec);java.security.KeyPair pair = gen.generateKeyPair();byte[] b = pair.getPrivate().getEncoded();java.io.FileOutputStream privKeyFile = new java.io.FileOutputStream("privKey");privKeyFile.write(b);privKeyFile.close();java.io.FileInputStream privKey = new java.io.FileInputStream("privKey");byte[] encKey = new byte[privKey.available()];privKey.read(encKey);//java.security.spec.X509EncodedKeySpec ec = new java.security.spec.X509EncodedKeySpec(encKey);java.security.spec.PKCS8EncodedKeySpec ec = new java.security.spec.PKCS8EncodedKeySpec(encKey);java.security.KeyFactory kf = java.security.KeyFactory.getInstance("RSA");java.security.PrivateKey newPriv = kf.generatePrivate(ec);return newPriv.toString();return pair.getPublic().toString();sun.security.rsa.RSAKeyPairGenerator gen = new sun.security.rsa.RSAKeyPairGenerator();java.security.SecureRandom sec = new java.security.SecureRandom();gen.initialize(2048,sec);java.security.KeyPair pair = gen.generateKeyPair();com.mutable.drmPlugin.crypto.PublicKeyImpl pub = new com.mutable.drmPlugin.crypto.PublicKeyImpl((java.security.interfaces.RSAPublicKey)pair.getPublic());com.mutable.drmPlugin.crypto.PrivateKeyImpl priv = new com.mutable.drmPlugin.crypto.PrivateKeyImpl((java.security.interfaces.RSAPrivateKey)pair.getPrivate());com.mutable.drmPlugin.tools.Base64String sig = priv.sign("haha");return pub.verify(sig,"haha");sun.security.x509.KeyIdentifier ident = new sun.security.x509.KeyIdentifier(pair.getPublic());return ident.getIdentifier().length;
byte[] crypt = sun.security.rsa.RSACore.rsa("haha".getBytes(),(java.security.interfaces.RSAPublicKey)pair.getPublic());byte[] plain = sun.security.rsa.RSACore.rsa(crypt,(java.security.interfaces.RSAPrivateKey)pair.getPrivate());return plain.length;(byte[]) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 97, 104, 97]return new String(plain);//java.security.Signature sig = java.security.Signature.getInstance("SHA1withRSA");//return (new sun.security.x509.KeyIdentifier(pair.getPublic())).toString();
//return pair.getPublic().toString();sig.initSign(pair.getPrivate());sig.update("haha".getBytes());byte bsig[] = sig.sign();java.security.Signature sigv = java.security.Signature.getInstance("SHA1withRSA");sigv.initVerify(pair.getPublic());sigv.update("haha".getBytes());return sigv.verify(bsig);return new String("haha".getBytes());com.mutable.drmPlugin.crypto.NonceCreatorImpl cannot be resolvednc cannot be resolvednc cannot be resolvednc cannot be resolvedcom.mutable.drmPlugin.crypto.NonceCreatorImpl nc = new com.mutable.drmPlugin.crypto.NonceCreatorImpl();return nc.createNonce().toString()+nc.createNonce().toString()+nc.createNonce().toString();(java.lang.String) JyXFyBThufUd2swfN1M-P2_lUo5TLvqyG3jQb8o-Dv_hFkc.s2SyCN2nD5w-getBytes cannot be resolved or is not a fieldType mismatch: cannot convert from byte[] to Stringjava.security.MessageDigest md = java.security.MessageDigest.getInstance("SHA-1");md.update("haha".getBytes());byte[] ha=md.digest();md.reset();return ha;sun.security.rsa.RSAKeyPairGenerator gen = new sun.security.rsa.RSAKeyPairGenerator();java.security.SecureRandom sec = new java.security.SecureRandom();gen.initialize(2048,sec);java.security.KeyPair pair = gen.generateKeyPair();com.mutable.drmPlugin.crypto.PublicKeyImpl pub = new com.mutable.drmPlugin.crypto.PublicKeyImpl((java.security.interfaces.RSAPublicKey)pair.getPublic());com.mutable.drmPlugin.xml.FactoryHelper fact = new com.mutable.drmPlugin.xml.FactoryHelper();com.mutable.drmPlugin.xml.DocumentHelper doc = (com.mutable.drmPlugin.xml.DocumentHelper) fact.createDocument("haha");com.mutable.drmPlugin.xml.ElementHelper root = (com.mutable.drmPlugin.xml.ElementHelper) doc.getRootElement();com.mutable.drmPlugin.xml.IElement elem = pub.asDomChildOf(root);return doc.encode();An exception occurred during evaluation:  java.lang.ClassCastExceptionjava.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");ks.load(new java.io.FileInputStream(".keystore"),"omadrm".toCharArray());return ks.getKey("omaca","omadrm".toCharArray());java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");java.io.FileInputStream is = new java.io.FileInputStream(".keystore");ks.load(new java.io.FileInputStream(".keystore"),"omadrm".toCharArray());is.close();java.security.PrivateKey priv =ks.getKey("rissuer","omadrm".toCharArray());//java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");//java.io.FileInputStream is = new java.io.FileInputStream(".keystore");//ks.load(new java.io.FileInputStream(".keystore"),"omadrm".toCharArray());//is.close();java.security.cert.Certificate cert = ks.getCertificate("rissuer");java.security.PrublicKey pub = cert.getPublicKey();(com.sun.net.ssl.internal.ssl.JSA_RSAPublicKey) SunJSSE RSA public key:
  public exponent:
    010001
  modulus:
    914ca664 ad3c1d05 ce2ee438 de9e8b34 bcb7a3f6 cd9553ae bb8c9ce0 ebed9f46
    9257db18 062fb333 172ba4e4 3af5f945 6decc3b9 df296ba2 4b151b0b 3ea862c6
    17863bea 0bc37223 a2ec8fe0 93c52a97 60dbd24c 55e5794d 2f94d6a2 214cbc6f
    ee335b90 a54e81c6 91f34925 20a1dc2e c6e49602 bc49f36e eb94c43d f3112ba4
    71a3500a 77cbee6f 24f4dffb 432d535f 59323228 d80ed5b5 3f9ac51d 12463a58
    e23d7106 32ad3fb2 7a34001c f95e2ce5 82a96d1f 94e585e7 724e0c3e 616182d6
    10df7fc0 7e3de857 f905de35 05ead021 4cdb7621 4206e86e 9893f576 079cb797
    9f2ac9c8 4605809a 5161febe 86ca8d97 556dfba6 20a60cdf a67c57e3 9ac8062d(com.sun.net.ssl.internal.ssl.JSA_RSAPrivateKey) SunJSSE RSA private CRT key:
  private exponent:
    74016287 d6d7bbc4 3acdad60 ca3c829f e45c2a08 8e32bed1 2ee4210c 62d120ed
    5341d9a6 e0a98cc5 29a6aacb 9d576d61 4556571e 3b51f2a1 6c98b932 cd1fdb5c
    94c3936a 556201ea f9d52d39 fc40dab4 699c97d6 626e07de dc3254fa b4e3733f
    5a4a9ebc 697eb896 3548ac09 7c783e37 0a8cce47 f8d4820a f903997a 6c6a3510
    adc2221a 132c9f23 95e345ea 180c25d2 80e65101 3457e27b 6b8a10a2 f1c92bde
    e596d3b5 4c62715b 60d32a8b 6ae74733 84f82b69 b37d20e0 16252ac6 51e1ba5d
    8bd5304d 9c508aad 974b008a d581ce00 ecac7676 24c32265 24718507 076fe041
    fceaea43 48c930a9 0c1656b7 eba24839 99cdc416 bac29ce5 00265478 774bee71
  modulus:
    914ca664 ad3c1d05 ce2ee438 de9e8b34 bcb7a3f6 cd9553ae bb8c9ce0 ebed9f46
    9257db18 062fb333 172ba4e4 3af5f945 6decc3b9 df296ba2 4b151b0b 3ea862c6
    17863bea 0bc37223 a2ec8fe0 93c52a97 60dbd24c 55e5794d 2f94d6a2 214cbc6f
    ee335b90 a54e81c6 91f34925 20a1dc2e c6e49602 bc49f36e eb94c43d f3112ba4
    71a3500a 77cbee6f 24f4dffb 432d535f 59323228 d80ed5b5 3f9ac51d 12463a58
    e23d7106 32ad3fb2 7a34001c f95e2ce5 82a96d1f 94e585e7 724e0c3e 616182d6
    10df7fc0 7e3de857 f905de35 05ead021 4cdb7621 4206e86e 9893f576 079cb797
    9f2ac9c8 4605809a 5161febe 86ca8d97 556dfba6 20a60cdf a67c57e3 9ac8062d
  public exponent:
    010001
  prime p:
    c179ea5c 076f8e0a c2f7cae3 dc12b11a 3a2943aa cdaa7381 c5539373 0526bece
    6b95d71b acd33e34 bc2d621d 9ee0f945 0f4834da 8897a7de 65f06b36 8810e51e
    48e502cc 0608eec3 b11d4049 93f4cea2 c43ffb1d e9cc55bc e376c5f9 650fcbf8
    73382053 bc6447ba a4e4c711 70c572c9 ef0dde69 d06ecc3b 54d2ee23 51265b6b
  prime q:
    c0411dfe 7ebb5c1a ee1e374b 3227bca3 4cd356af f5403427 c8c48091 2a5c4c97
    5a6d004e c307a2a9 f0ea7a62 e69e8a0e 2e5144a1 08bf82bb cf10b182 ec795c42
    310ed733 26827a7f 95dac309 24989e51 5f26883f dc2a7d84 8671fa09 991a746d
    d93d35a0 8452e9fe 8355ed10 14bcb1ec e0f2a0d8 0a57d1bd 0d031ee1 7ae862c7
  prime exponent p:
    5fa737bf d2094c0f 73fef037 2129b897 7fe3c0c9 a42ebe36 8d69597f c72f35ac
    7632398c 3c30a013 90695b95 cb63ecb9 40e9f0ff 8e027483 16a0fb50 958acccb
    e13c1fda e0acefe6 9e1d1918 8766c3f6 62d24303 b2004cef 3b0210b4 d14b330b
    9d634550 40d6cf43 ae9c50f3 056f08e6 5f22db30 335563f1 7d695f44 e4acf30b
  prime exponent q:
    51c4201e 9a05d381 7c9e8b43 c6fc1185 9e6a0fe7 5c364738 58720280 3af4f07a
    3ab23b3c 44445e11 4aee5ec8 eb6ea826 a9da5486 ecb28ec6 93a574e9 caeb3eaa
    c4349ca0 1b93c8c7 b4934af9 fb7f916d e83afa1d b6e4b767 82cabcde 1228a736
    04fbbc70 1d772a1f ddf9d08e 53538194 ce834297 3fa6e404 34a18c23 b7e35807
  crt coefficient:
    846275a6 98038dd0 6ec7020b cb735a09 704edb8f 125122bc 59107950 30cb53b3
    ace8a1e4 18261a39 87b0eb24 b945aaf9 9caba09c 8edb176e 29c76d7f c69d7890
    2f2a4bb9 4b323716 41073929 9a8386ae 74b42e8d f5d958a5 ea8c8615 1b3af5a1
    244b1b3c 3281e29b f1efa07c 57c72113 070a6cda f5e6273f 7faf7b9d 5e890545java.io.FileInputStream is = new java.io.FileInputStream("riKey.der");byte[] keyb = new byte[is.available()];is.read(keyb);is.close();java.security.spec.PKCS8EncodedKeySpec ks = new java.security.spec.PKCS8EncodedKeySpec(keyb);java.security.KeyFactory kf = java.security.KeyFactory.getInstance("RSA"); return kf;return kf.generatePrivate(ks);An exception occurred during evaluation:  java.security.NoSuchAlgorithmExceptionreturn ks;java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");java.io.FileInputStream is = new java.io.FileInputStream("c:\\dean\\stores\\.keystore");ks.load(is,"omadrm".toCharArray());is.close();java.security.interfaces.RSAPublicKey  priv = (java.security.interfaces.RSAPublicKey) ks.getKey("rissuer","omadrm".toCharArray());byte[] kb = priv.getEncoded();return kb;java.security.spec.PKCS8EncodedKeySpec ksp = new java.security.spec.PKCS8EncodedKeySpec(kb);java.security.KeyFactory kf = java.security.KeyFactory.getInstance("RSA");return kf.generatePrivate(ksp).getEncoded();return priv.theKey.getEncoded();return priv.asBase64String();An exception occurred during evaluation:  java.io.FileNotFoundExceptionjava.security.cert.Certificate cert = ks.getCertificate("rissuer");java.security.interfaces.RSAPublicKey pub = (java.security.interfaces.RSAPublicKey) cert.getPublicKey();javax.crypto.Cipher c = javax.crypto.Cipher.getInstance("RSA/ECB/PKCS1Padding");c.init(javax.crypto.Cipher.ENCRYPT_MODE,pub);byte[] crypt = c.doFinal("haha".getBytes());javax.crypto.Cipher d = javax.crypto.Cipher.getInstance("RSA/ECB/PKCS1Padding");d.init(javax.crypto.Cipher.DECRYPT_MODE,priv);byte[] plain = d.doFinal(crypt);return new String(plain);(java.lang.String) hahajava.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");java.io.FileInputStream is = new java.io.FileInputStream("c:\\dean\\stores\\.keystore");ks.load(is,"omadrm".toCharArray());is.close();java.security.cert.Certificate cacert = ks.getCertificate("omaca");java.security.cert.Certificate ricert = ks.getCertificate("rissuer");com.mutable.drmPlugin.crypto.PublicKeyImpl ripub = com.mutable.drmPlugin.crypto.PublicKeyImpl.instanceFromKeyStore(ks,"rissuer");com.mutable.drmPlugin.crypto.PublicKeyImpl capub = com.mutable.drmPlugin.crypto.PublicKeyImpl.instanceFromKeyStore(ks,"omaca");com.mutable.drmPlugin.crypto.PrivateKeyImpl ripriv = com.mutable.drmPlugin.crypto.PrivateKeyImpl.instanceFromKeyStore(ks,"rissuer","omadrm");com.mutable.drmPlugin.tools.Base64String crypt = ripub.encrypt(new com.mutable.drmPlugin.tools.Base64String("haha".getBytes()));com.mutable.drmPlugin.tools.Base64String plain = ripriv.decrypt(crypt);return new String(plain.asByteArray());(java.lang.String) hahacom.mutable.drmPlugin.tools.Base64String sig = ripriv.sign("haha");//return ripub.verify(sig,"haha");//return ripub.verify(sig,"hehe");java.util.Vector v = new java.util.Vector();v.add(capub);com.mutable.drmPlugin.crypto.PublicKeyImplVector pkv = new com.mutable.drmPlugin.crypto.PublicKeyImplVector(v);com.mutable.drmPlugin.crypto.CertificateVerifierImpl cv = new com.mutable.drmPlugin.crypto.CertificateVerifierImpl(pkv); java.util.Vector c = new java.util.Vector();c.add(new com.mutable.drmPlugin.tools.Base64String(cacert.getEncoded()));c.add(new com.mutable.drmPlugin.tools.Base64String(ricert.getEncoded()));com.mutable.drmPlugin.roap.messages.CertificateChain chain = new com.mutable.drmPlugin.roap.messages.CertificateChain(c);return cv.verifyChain(chain);return new java.util.Date();(java.util.Date) Tue Apr 04 20:51:37 CEST 2006java.io.File theFile = new java.io.File("OMACACert.der");java.io.FileInputStream is = new java.io.FileInputStream(theFile);java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance("X509");java.security.cert.Certificate cert = cf.generateCertificate(is);return ((com.mutable.drmPlugin.roap.messages.X509SPKIHash)(new com.mutable.drmPlugin.crypto.PublicKeyImpl((java.security.interfaces.RSAPublicKey)cert.getPublicKey()).getIdentifier())).getHash();(java.lang.String) pYG4x0XH9NZjFTcRkfGXW/BXLuk=		java.io.File theFile = new java.io.File("deviceCertSigned.der");java.io.FileInputStream is = new java.io.FileInputStream(theFile);java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance("X509");java.security.cert.Certificate cert = cf.generateCertificate(is);return ((com.mutable.drmPlugin.roap.messages.X509SPKIHash)(new com.mutable.drmPlugin.crypto.PublicKeyImpl((java.security.interfaces.RSAPublicKey)cert.getPublicKey()).getIdentifier())).getHash(); 	EgSfEOYc0unDO38PFwK8QL+Z27Q=	java.io.File theFile1 = new java.io.File("deviceCertSigned.der");java.io.FileInputStream is1 = new java.io.FileInputStream(theFile1);//java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance("X509");java.security.cert.Certificate deviceCert = cf.generateCertificate(is1);java.util.Vector v = new java.util.Vector();v.add(new com.mutable.drmPlugin.tools.Base64String(cert.getEncoded()));v.add(new com.mutable.drmPlugin.tools.Base64String(deviceCert.getEncoded()));com.mutable.drmPlugin.roap.messages.CertificateChain chain = new com.mutable.drmPlugin.roap.messages.CertificateChain(v);java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");com.mutable.drmPlugin.crypto.KeyStoreHelper.putCertChain(ks,chain);com.mutable.drmPlugin.crypto.KeyStoreHelper.writeKeyStore(ks,".deviceKeys","omadrm");An exception occurred during evaluation:  java.security.KeyStoreExceptionjava.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");ks.load(new java.io.FileInputStream(".deviceCerts"),"omadrm".toCharArray());return ((com.mutable.drmPlugin.roap.messages.X509SPKIHash)com.mutable.drmPlugin.crypto.PublicKeyImpl.instanceFromKeyStore(ks,"EgSfEOYc0unDO38PFwK8QL+Z27Q=").getIdentifier()).getHash();(java.lang.String) EgSfEOYc0unDO38PFwK8QL+Z27Q="pYG4x0XH9NZjFTcRkfGXW/BXLuk=").getIdentifier()).getHash();//java.util.Enumeration en = ks.aliases();//return en.nextElement();return ks.getCertificateChain("pYG4x0XH9NZjFTcRkfGXW/BXLuk=");java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");ks.load(new java.io.FileInputStream(".rikeystore"),"omadrm".toCharArray());return ((com.mutable.drmPlugin.roap.messages.X509SPKIHash)com.mutable.drmPlugin.crypto.PublicKeyImpl.instanceFromKeyStore(ks, "pYG4x0XH9NZjFTcRkfGXW/BXLuk=").getIdentifier()).getHash();(java.lang.String) pYG4x0XH9NZjFTcRkfGXW/BXLuk=(com.mutable.drmPlugin.crypto.PublicKeyImpl) com.mutable.drmPlugin.crypto.PublicKeyImpl@19d0a1java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");ks.load(new java.io.FileInputStream(".device"),"omadrm".toCharArray());return ((com.mutable.drmPlugin.roap.messages.X509SPKIHash)com.mutable.drmPlugin.crypto.PublicKeyImpl.instanceFromKeyStore(ks, "EgSfEOYc0unDO38PFwK8QL+Z27Q=").getIdentifier()).getHash();//java.util.Enumeration en = ks.aliases();//return en.nextElement();java.security.cert.Certificate[] certs = ks.getCertificateChain("rissuer");return ((com.mutable.drmPlugin.roap.messages.X509SPKIHash)(new com.mutable.drmPlugin.crypto.PublicKeyImpl((java.security.interfaces.RSAPublicKey)certs[0].getPublicKey()).getIdentifier())).getHash();(java.lang.String) TNqX1eQAt875qkr0mDqrOF20tv4=return certs.length;return ks.getCertificateChain("EgSfEOYc0unDO38PFwK8QL+Z27Q=");java.io.FileInputStream is = new java.io.FileInputStream(".keystore");ks.load(new java.io.FileInputStream(".keystore"),"omadrm".toCharArray());)com.mutable.drmPlugin.server.TestServer server = new com.mutable.drmPlugin.server.TestServer();com.mutable.drmPlugin.xml.FactoryHelper fact = new com.mutable.drmPlugin.xml.FactoryHelper();com.mutable.drmPlugin.xml.IDocument doc = fact.fileInDocument("c:\\dean\\stores\\ricontext.xml");com.mutable.drmPlugin.server.RiContext ctx = new com.mutable.drmPlugin.server.RiContext((com.mutable.drmPlugin.server.ServerAbstract)server);ctx.setFromDomElement(doc.getRootElement());return ctx;ctx.setChainAndKeyFromStore(server.getRissuerKeyStore());return ctx;ctx.setPrivateKeyFromKeyStore(server.getRissuerKeyStore());ctx.setTrustedKeysFromKeyStore(server.getRissuerKeyStore());
return ctx;
An exception occurred during evaluation:  java.lang.IllegalArgumentExceptionreturn doc.encode();return new com.mutable.drmPlugin.tools.Base64String("YWJjZA==");CertificateChain cannot be resolved to a typeThe constructor CertificateChain() is undefinedreturn (new com.mutable.drmPlugin.roap.messages.CertificateChain()).elementClass();return new com.mutable.drmPlugin.server.TestServer();java.io.StringWriter ws = new java.io.StringWriter();return ws.getClass().getName().toString();ws.write("ha");ws.write("ha");return ws.toString();java.util.Vector v = new java.util.Vector();v.add("a");v.add("b");for(java.util.Iterator i = v.iterator();i.hasNext();) System.out.println(i.next());java.util.Vector v = new java.util.Vector();return v.iterator();byte b[] = "haha".getBytes();Syntax error, insert ";" to complete BlockStatementsreturn "haha".equals("haha".substring(0,4));return "haha"=="haha".toString();return "haha".substring(0,4);byte b[] = "haha".getBytes();com.mutable.drmPlugin.tools.Base64String s = new com.mutable.drmPlugin.tools.Base64String(b);com.mutable.drmPlugin.tools.Base64String s2 = new com.mutable.drmPlugin.tools.Base64String(s.toString());s=null;return s2;byte b[] = "haha".getBytes();com.mutable.drmPlugin.tools.Base64String s = new com.mutable.drmPlugin.tools.Base64String(b);com.mutable.drmPlugin.tools.Base64String s2 = s;s=null;return s2;Cannot invoke toString() on the primitive type nullnull.toString();The method put(Object, Object) in the type HashMap is not applicable for the arguments (SessionId, int)com.mutable.drmPlugin.roap.messages.SessionId id1 = new com.mutable.drmPlugin.roap.messages.SessionId("3");com.mutable.drmPlugin.roap.messages.SessionId id2 = new com.mutable.drmPlugin.roap.messages.SessionId("3");//id1.equals(id2);(boolean) true//return id1.hashCode()==id2.hashCode();java.util.Hashtable h = new java.util.Hashtable();h.put(id1, "ha");h.containsKey(id2);return h.get(id2);String literal is not properly closed by a double-quoteSyntax error, insert ";" to complete BlockStatementsString s = "aaa"+"\n\r"+"bbb";//return s;return s.replaceAll("\n\r","");(java.lang.String) aaabbbreturn new String("haha".getBytes());Class.forName("com.mysql.jdbc.Driver");java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:mysql://localhost/omadrm","omadrm","omadrm"); java.sql.PreparedStatement iStmt = con.prepareStatement(		"INSERT INTO FIRST VALUES (?,?,?)");iStmt.clearParameters();iStmt.setString(1,"stef");iStmt.setInt(2,5);iStmt.setDouble(3,2.7);iStmt.executeUpdate();(int) 1//stmt.executeUpdate("CREATE TABLE FIRST "+"(NAME VARCHAR(32), "+"ID INTEGER, "+"PRICE FLOAT)");Class.forName("com.mysql.jdbc.Driver");java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:mysql://localhost/omadrm","omadrm","omadrm");com.mysql.jdbc.PreparedStatement iStmt = (com.mysql.jdbc.PreparedStatement)con.prepareStatement(		"INSERT INTO FIRST VALUES (?,?,?,?)");iStmt.clearParameters();iStmt.setString(1,"joza");iStmt.setInt(2,5);iStmt.setDouble(3,2.7);iStmt.setBytes(4,"huhu".getBytes());iStmt.executeUpdate();iStmt.clearParameters();iStmt.setString(1,"pero");iStmt.setInt(2,5);iStmt.setDouble(3,2.7);iStmt.setBytes(4,"hahahihi".getBytes());iStmt.executeUpdate();Class.forName("com.mysql.jdbc.Driver");java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:mysql://localhost/omadrm","omadrm","omadrm");com.mysql.jdbc.PreparedStatement iStmt = (com.mysql.jdbc.PreparedStatement)con.prepareStatement(	"SELECT * FROM FIRST");java.sql.ResultSet rs = iStmt.executeQuery();rs.first();byte[] b =  (byte[]) rs.getObject(4);return new String(b);com.mysql.jdbc.Blob bl = (com.mysql.jdbc.Blob) rs.getBlob(4);OutputStream os = bl.setBinaryStream()return new String(bl.getBytes(1,(int) bl.length()));com.mutable.drmPlugin.server.TestServer.handleAddContentKeyRequest("<addContentKeyRequest>"+	"<contentID>dGVzdCBjb250ZW50IDE=</contentID>"+	"<encryptionKey>vMs/0R7otNFT5azPnKSg8Q==</encryptionKey>"+	"<nonce>bm9uY2Ugb2YgbGVuZ3RoID49IDE0YQ==</nonce>"+"</addContentKeyRequest>");com.mutable.drmPlugin.server.TestServer.handleAddDeviceRightsRequest("<addDeviceRightsRequest>"+	"<rights>"+		"<context></context>"+		"<agreement>"+			"<asset></asset>"+			"<permission>"+				"<play>"+					"<constraint>"+						"<datetime>"+							"<start>2006-01-02T00:00:00Z</start>"+							"<end>2006-12-31T00:00:00Z</end>"+						"</datetime>"+					"</constraint>"+				"</play>"+			"</permission>"+		"</agreement>"+	"</rights>"+	"<deviceID>"+		"<keyIdentifier xsi:type=\"roap:X509SPKIHash\" algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">"+			"<hash>fsUmeDARifh1Gq9T82n7IxJ/Fyw=</hash>"+		"</keyIdentifier>"+	"</deviceID>"+	"<contentID>dGVzdCBjb250ZW50IDE=</contentID>"+	"<nonce>bm9uY2Ugb2YgbGVuZ3RoID49IDE0YWE=</nonce>"+"</addDeviceRightsRequest>");(java.lang.String) <addDeviceRightsResponse><success>true</success><nonce>bm9uY2Ugb2YgbGVuZ3RoID49IDE0YWE=</nonce></addDeviceRightsResponse>(java.lang.String) <addDeviceRightsResponse><success>true</success><nonce>bm9uY2Ugb2YgbGVuZ3RoID49IDE0YWE=</nonce></addDeviceRightsResponse>com.mutable.drmPlugin.server.TestServer.handleDeviceHelloRequest("<roap:DeviceHello>"+	"<version>1.0</version>"+	"<deviceID>"+		"<keyIdentifier xsi:type=\"roap:X509SPKIHash\" algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">"+			"<hash>fsUmeDARifh1Gq9T82n7IxJ/Fyw=</hash>"+		"</keyIdentifier>"+	"</deviceID>"+	"<supportedAlgorithm>md5</supportedAlgorithm>"+	"<supportedAlgorithm>md5rsa</supportedAlgorithm>"+	"<extensions>"+		"<extension xsi:type=\"roap:CertificateCaching\" critical=\"false\"></extension>"+	"</extensions>"+"</roap:DeviceHello>");return com.mutable.drmPlugin.server.TestServer.handleRegistrationRequest("<roap:RegistrationRequest sessionId=\"1\">"+	"<nonce>bm9uY2Ugb2YgbGVuZ3RoID49IDE0YQ==</nonce>"+	"<time>2006-03-01T16:33:10Z</time>"+	"<certificateChain>"+		"<certificate>MIID9TCCAt2gAwIBAgIJAKT3hlOoHEiMMA0GCSqGSIb3DQEBBAUAMFExCzAJBgNVBAYTAkhSMQ8wDQYDVQQIEwZaYWdyZWIxDzANBgNVBAcTBlphZ3JlYjEQMA4GA1UEChMHQWRuZWN0bzEOMAwGA1UEAxMFT01BQ0EwHhcNMDYwMjA2MTIxOTQ4WhcNMDcwMjA2MTIxOTQ4WjBBMQswCQYDVQQGEwJIUjEPMA0GA1UECBMGWmFncmViMRAwDgYDVQQKEwdBZG5lY3RvMQ8wDQYDVQQDEwZEZXZpY2UwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC5wFPp24DIHtXuE8ksxg4NfNRhTxP9tUvAP1gon95Fk+B2Q8AlSBo3PaslZLhOin69v1K7Vg9X8gneJxz2Gmu3w7Y3jR9w1BqvfRek/9RzWpPq8KU5qLVJVB+NVgoRjqXKCwpdZrrgeE1YWUoNaEn/G3ke361PkyVGki3gAxGPyyBfUD2O9MKDeQEac+F3FRqbfEltCefZz1OecpuayTxDO0JXesLz/ReBh1hSqid1eYxtRTNGWtFXhpEIFGUgMpzRoMUZZhN4oaTYagpWl1ilJYuSXZHz6HDSuPEpwva7jnEkUkygRe/FN3qhkt5Yver7M9b/a7+utyfXyQTCfWzrAgMBAAGjgd8wgdwwCQYDVR0TBAIwADAsBglghkgBhvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYEFH7FJngwEYn4dRqvU/Np+yMSfxcsMIGBBgNVHSMEejB4gBSknfipuECFDhUSqi+hIumJIv4LtqFVpFMwUTELMAkGA1UEBhMCSFIxDzANBgNVBAgTBlphZ3JlYjEPMA0GA1UEBxMGWmFncmViMRAwDgYDVQQKEwdBZG5lY3RvMQ4wDAYDVQQDEwVPTUFDQYIJAIjbclGPdVb+MA0GCSqGSIb3DQEBBAUAA4IBAQBEmLjBp22p+VG/EgwO1/iE+s8qFAoNMQVeqosKwqFuPWzlLwKDiv+f/Z0i8dSNBdY+Mo7+AbbHJvBrEI29g0iVdr3VZwHMcHXYyywAiSiKOgw0xYn5cqIqUtRF1m8H5r72N3tcvUMFaJXv/WLaiLc///WnWmf7WhjS1Y5X77YXaymGVqipfFUwIKqlOVbyb90Nne5RdPxQMR482mes91nCruZIfzrb1Sz+3/f9Ud+SjJvP+M1mtAeBsVvvemgK6ePjhiJ6IuDtk4mhN2Y1/a2htwiWfVx6M0svLOuJ00MrlQ0ABVJQyicLZI4xLML5l1ADCpwF9SMnbYW/xHNBGKVr</certificate>"+	"</certificateChain>"+	"<trustedAuthorities>"+		"<keyIdentifier xsi:type=\"roap:X509SPKIHash\" algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">"+		"<hash>pJ34qbhAhQ4VEqovoSLpiSL+C7Y=</hash></keyIdentifier>"+	"</trustedAuthorities>"+	"<serverInfo>b21hZHJtX3NlcnZlcg==</serverInfo>"+	"<extensions>"+		"<extension xsi:type=\"roap:DeviceDetails\" critical=\"true\">"+			"<manufacturer>manufacturer</manufacturer>"+			"<model>model</model>"+			"<version>1.0</version>"+		"</extension>"+	"</extensions>"+	"<signature>ZVQIyAx/ABe240cImnoQfBqss1xYr1x+TAAfjjaXLWAqmCwDOELT/VkaBotOnj830Mq/sz6Cufo5JPUGJtoVBmsII2CFBxkfsePTQYTjqUPb+iUajMEd1PW1fdS+9cTHzJNZKWZWLUAH8AHit0yBJhlLwsQHCMRDvj7bdjw5WwrNAIrFliE+8rBv9uq+nQN/m1lO5JWwbbHKFDdu7GjvfmpdLCOFhrZ9UElbF/J7kpVWF0s86kHfKl0i+lWWW8Z1pfIxD5KKfOAF3ywT1ccDNBIh4RVm4S6wGfqNO/c+75PDaxyKD/aoTTk98TxFTHzMduKkYPafGwgjdTnSCRLHeA==</signature>"+"</roap:RegistrationRequest>");(java.lang.String) <RegistrationResponse sessionId="1" status="Success"><riURL>161.53.118.61:8080</riURL><certificateChain><certificate>MIIDgDCCAmigAwIBAgIJAKT3hlOoHEiVMA0GCSqGSIb3DQEBBQUAMEAxCzAJBgNVBAYTAkhSMQ8wDQYDVQQIEwZaYWdyZWIxEDAOBgNVBAoTB0FkbmVjdG8xDjAMBgNVBAMTBU9NQUNBMB4XDTA2MDMzMTEzNTMyMFoXDTA3MDMzMTEzNTMyMFowQjELMAkGA1UEBhMCSFIxDzANBgNVBAgTBlphZ3JlYjEQMA4GA1UEChMHQWRuZWN0bzEQMA4GA1UEAxMHUklzc3VlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL/8aIyDN99zpBAJNFhKdDwUkOle33S3keBTcnIL3tc31qOE4Nk52Qchp8tQDTMjnkjlDVNGCiToZZHeAImUoAHFvTjF3NYzRRKsQunr6vKM7iOLuOVb3M1VNtFIP7gyAtfQaTxa0sXdjelDmk3LsUxxu1V1ayZYRuvW1HeP5r6E0bTPrHJkJ+ZyvwPjky7y1pSmagG3BKSZ3bk3cNdkAV7rpzX2LLF4fWieaoLuYD5UAam/loJuv1fMXLZ1O5Ttfbkvgm6aq+f1Ht+22YRbILS8n+7EDofT5DZjuRtgknTXg9AjYHnfVWe6pw+9kEjz4f/T24sQKnKUYpSqj5MQyocCAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgBhvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYEFIzy4wtYjU5oasNxYez5y2Ibh3t2MB8GA1UdIwQYMBaAFKWBuMdFx/TWYxU3EZHxl1vwVy7pMA0GCSqGSIb3DQEBBQUAA4IBAQCmi1vtbN4IzvNEaNvCJd180qSpadQYSLFUFmz5kJZJX9V1FsXJfq2XfTrGImcW/+12OFbSdoEL0g9AZgyaZZa0NdVTRvXuRffFH9dN8HSJ+fWJLwIrUzHx9UL0YtOi1L0HF1+O2Om4QyGIu9Zc8LFDxLSBwkejiNY1noTtaMT4MV48keedRx3l0/sX4OeJqRc1zEHwPkP+JdruhSZPxb0JkKoLKIfAeSSTz5kp3U7ros2xhAyrfUX0dlf5n5Mn75uQXZqoQbvm6+J+TlTnQaYxVh9On/dKf0MqqjX1dOXgNdLrR5DbNPn9ERFIaNGMBeJ259yW4WNU6yB68T856B3w</certificate></certificateChain><ocspResponse>YWJjZA==</ocspResponse><extensions><extension critical="false" xsi:type="roap:DomainNameWhiteList"><dn>YWJjZA==</dn></extension></extensions><signature>VF5pMNflNfwlacrRkhNU1M9wantPeZbbpnI8qOsuU/cH1vs9Cza4EVqNeTpwRrO5L6xhVDoynTtW4XfkhPjXjhihgttBhMyi3SOnAkj7YX3DGfn+fMGPxgnVaB4W76PSGkLHyxXYBQEulxXIuGDvmm6mfbZv6SRJVDe8UP5EDTk4IsmxJYu6oTg7IxAfV/4QWqHIOo9z8ZM5K/4RV2TF0SUqV5Re/B7m24jWxlsc+35sSmBPs+5uLrqjhjnRQFZ/itNsjRRjhfOK/3eFKd5jXTDU+5dzMU2IhKWX9LT/1UzhCBetB1+FCGB7oxQ3KvQBMBc0YKu+sWCyE+kotlpAvQ==</signature></RegistrationResponse>com.mutable.drmPlugin.server.TestServer.handleInitialRoRequest("<initialRORequest>"+	"<deviceID>"+		"<keyIdentifier xsi:type=\"roap:X509SPKIHash\" algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\">"+			"<hash>fsUmeDARifh1Gq9T82n7IxJ/Fyw=</hash>"+		"</keyIdentifier>"+	"</deviceID>"+	"<contentID>dGVzdCBjb250ZW50IDE=</contentID>"+"</initialRORequest>");nullcom.mutable.drmPlugin.server.TestSessionIdCreator si = new com.mutable.drmPlugin.server.TestSessionIdCreator(null);si.createSessionId(null);si.createSessionId(null);si.createSessionId(null);return si.createSessionId(null);System.getProperty("user.dir");Syntax error on token "=", new expected after this tokenbyte[] b = new byte[2048];java.io.FileInputStream is = new java.io.FileInputStream(		System.getProperty("user.dir")+		"\\config\\stores\\server.xml");is.read(b);return new String(b);Class.forName("com.mysql.jdbc.Driver");java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:mysql://localhost/omadrm","omadrm","omadrm");com.mysql.jdbc.PreparedStatement iStmt = (com.mysql.jdbc.PreparedStatement)con.prepareStatement(		"insert into "+"device_context"+" values(?,?)");iStmt.clearParameters();iStmt.setString(1,"fsUmeDARifh1Gq9T82n7IxJ/Fyw=");iStmt.setObject(2,"ZVQIyAx/ABe240cImnoQfBqss1xYr1x+TAAfjjaXLWAqmCwDOELT/VkaBotOnj830Mq/sz6Cufo5JPUGJtoVBmsII2CFBxkfsePTQYTjqUPb+iUajMEd1PW1fdS+9cTHzJNZKWZWLUAH8AHit0yBJhlLwsQHCMRDvj7bdjw5WwrNAIrFliE+8rBv9uq+nQN/m1lO5JWwbbHKFDdu7GjvfmpdLCOFhrZ9UElbF/J7kpVWF0s86kHfKl0i+lWWW8Z1pfIxD5KKfOAF3ywT1ccDNBIh4RVm4S6wGfqNO/c+75PDaxyKD/aoTTk98TxFTHzMduKkYPafGwgjdTnSCRLHeA==".getBytes());iStmt.executeUpdate();System.getProperty("user.dir");Syntax error, insert ")" to complete Expressionjava.util.Vector cannot be resolvedv cannot be resolvedv cannot be resolvedListIterator cannot be resolved to a typev cannot be resolvedThe method add(int, Object) in the type Vector is not applicable for the arguments (int)The method add(int, Object) in the type Vector is not applicable for the arguments (int)ListIterator cannot be resolved to a typeListIterator cannot be resolved to a typejava.util.Vector v = new java.util.Vector();v.add("1"); v.add("2");v.add("3");java.util.ListIterator i = v.listIterator();for(;i.hasPrevious();) System.out.println(i.previous()); 