/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains Client Stub implementation for remote web service.
 */

#include "OMADRMWS.hpp"

#include <axis/AxisWrapperAPI.hpp>
#include <string.h>

using namespace std;

 extern int Axis_DeSerialize_WSAddContentKeyRequest(WSAddContentKeyRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSAddContentKeyRequest(WSAddContentKeyRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSAddContentKeyRequest(WSAddContentKeyRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSAddContentKeyRequest(WSAddContentKeyRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSAddContentKeyRequest();

extern int Axis_DeSerialize_WSAddDeviceRightsRequest(WSAddDeviceRightsRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSAddDeviceRightsRequest(WSAddDeviceRightsRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSAddDeviceRightsRequest(WSAddDeviceRightsRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSAddDeviceRightsRequest(WSAddDeviceRightsRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSAddDeviceRightsRequest();

extern int Axis_DeSerialize_WSAddContentKeyResponse(WSAddContentKeyResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSAddContentKeyResponse(WSAddContentKeyResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSAddContentKeyResponse(WSAddContentKeyResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSAddContentKeyResponse(WSAddContentKeyResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSAddContentKeyResponse();

extern int Axis_DeSerialize_WSAddDeviceRightsResponse(WSAddDeviceRightsResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSAddDeviceRightsResponse(WSAddDeviceRightsResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSAddDeviceRightsResponse(WSAddDeviceRightsResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSAddDeviceRightsResponse(WSAddDeviceRightsResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSAddDeviceRightsResponse();

OMADRMWS::OMADRMWS(const char* pchEndpointUri, AXIS_PROTOCOL_TYPE eProtocol)
:Stub(pchEndpointUri, eProtocol)
{
}

OMADRMWS::OMADRMWS()
:Stub(" ", APTHTTP1_1)
{
	m_pCall->setEndpointURI("http://localhost:8080/OMADRMWS/services/OMADRMWebService");
}

OMADRMWS::~OMADRMWS()
{
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service method addContentKey
 */
WSAddContentKeyResponse* OMADRMWS::addContentKey(WSAddContentKeyRequest* Value0)
{
	WSAddContentKeyResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("addContentKey", "http://ws.omadrm.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_WSAddContentKeyRequest, (void*)Axis_Delete_WSAddContentKeyRequest, "add_key_request", Axis_URI_WSAddContentKeyRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("addContentKeyResponse", "http://ws.omadrm.mutable.com"))
			{
				pReturn = (WSAddContentKeyResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_WSAddContentKeyResponse, (void*) Axis_Create_WSAddContentKeyResponse, (void*) Axis_Delete_WSAddContentKeyResponse,"add_key_response", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
		throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault","http://localhost:8080/OMADRMWS/services/OMADRMWebService" );
		if(pSoapFault)
		{
			m_pCall->unInitialize();
			throw SoapFaultException(e);
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method addDeviceRights
 */
WSAddDeviceRightsResponse* OMADRMWS::addDeviceRights(WSAddDeviceRightsRequest* Value0)
{
	WSAddDeviceRightsResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("addDeviceRights", "http://ws.omadrm.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_WSAddDeviceRightsRequest, (void*)Axis_Delete_WSAddDeviceRightsRequest, "add_rights_request", Axis_URI_WSAddDeviceRightsRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("addDeviceRightsResponse", "http://ws.omadrm.mutable.com"))
			{
				pReturn = (WSAddDeviceRightsResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_WSAddDeviceRightsResponse, (void*) Axis_Create_WSAddDeviceRightsResponse, (void*) Axis_Delete_WSAddDeviceRightsResponse,"add_rights_response", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
		throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault","http://localhost:8080/OMADRMWS/services/OMADRMWebService" );
		if(pSoapFault)
		{
			m_pCall->unInitialize();
			throw SoapFaultException(e);
		}
		else throw;
*/
	}
}

