/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains Client Stub implementation for remote web service.
 */

#include "OMADRMWS.hpp"

#include <axis/AxisWrapperAPI.hpp>
#include <string.h>

using namespace std;

 extern int Axis_DeSerialize_WSRORequest(WSRORequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSRORequest(WSRORequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSRORequest(WSRORequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSRORequest(WSRORequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSRORequest();

extern int Axis_DeSerialize_WSROAcquisitionTrigger(WSROAcquisitionTrigger* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSROAcquisitionTrigger(WSROAcquisitionTrigger *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSROAcquisitionTrigger(WSROAcquisitionTrigger* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSROAcquisitionTrigger(WSROAcquisitionTrigger* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSROAcquisitionTrigger();

extern int Axis_DeSerialize_WSRIHello(WSRIHello* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSRIHello(WSRIHello *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSRIHello(WSRIHello* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSRIHello(WSRIHello* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSRIHello();

extern int Axis_DeSerialize_WSROResponse(WSROResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSROResponse(WSROResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSROResponse(WSROResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSROResponse(WSROResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSROResponse();

extern int Axis_DeSerialize_WSRegistrationResponse(WSRegistrationResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSRegistrationResponse(WSRegistrationResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSRegistrationResponse(WSRegistrationResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSRegistrationResponse(WSRegistrationResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSRegistrationResponse();

extern int Axis_DeSerialize_WSRegistrationRequest(WSRegistrationRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSRegistrationRequest(WSRegistrationRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSRegistrationRequest(WSRegistrationRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSRegistrationRequest(WSRegistrationRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSRegistrationRequest();

extern int Axis_DeSerialize_WSInitialRORequest(WSInitialRORequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSInitialRORequest(WSInitialRORequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSInitialRORequest(WSInitialRORequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSInitialRORequest(WSInitialRORequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSInitialRORequest();

extern int Axis_DeSerialize_WSDeviceHello(WSDeviceHello* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_WSDeviceHello(WSDeviceHello *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_WSDeviceHello(WSDeviceHello* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_WSDeviceHello(WSDeviceHello* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_WSDeviceHello();

OMADRMWS::OMADRMWS(const char* pchEndpointUri, AXIS_PROTOCOL_TYPE eProtocol)
:Stub(pchEndpointUri, eProtocol)
{
}

OMADRMWS::OMADRMWS()
:Stub(" ", APTHTTP1_1)
{
	m_pCall->setEndpointURI("http://localhost:8080/OMADRMWS/services/OMADRMWebService");
}

OMADRMWS::~OMADRMWS()
{
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service method hello
 */
WSRIHello* OMADRMWS::hello(WSDeviceHello* Value0)
{
	WSRIHello* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("hello", "http://ws.omadrm.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_WSDeviceHello, (void*)Axis_Delete_WSDeviceHello, "message", Axis_URI_WSDeviceHello);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("helloResponse", "http://ws.omadrm.mutable.com"))
			{
				pReturn = (WSRIHello*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_WSRIHello, (void*) Axis_Create_WSRIHello, (void*) Axis_Delete_WSRIHello,"message", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
		throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault","http://localhost:8080/OMADRMWS/services/OMADRMWebService" );
		if(pSoapFault)
		{
			m_pCall->unInitialize();
			throw SoapFaultException(e);
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method registration
 */
WSRegistrationResponse* OMADRMWS::registration(WSRegistrationRequest* Value0)
{
	WSRegistrationResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("registration", "http://ws.omadrm.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_WSRegistrationRequest, (void*)Axis_Delete_WSRegistrationRequest, "message", Axis_URI_WSRegistrationRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("registrationResponse", "http://ws.omadrm.mutable.com"))
			{
				pReturn = (WSRegistrationResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_WSRegistrationResponse, (void*) Axis_Create_WSRegistrationResponse, (void*) Axis_Delete_WSRegistrationResponse,"message", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
		throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault","http://localhost:8080/OMADRMWS/services/OMADRMWebService" );
		if(pSoapFault)
		{
			m_pCall->unInitialize();
			throw SoapFaultException(e);
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method initialRO
 */
WSROAcquisitionTrigger* OMADRMWS::initialRO(WSInitialRORequest* Value0)
{
	WSROAcquisitionTrigger* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("initialRO", "http://ws.omadrm.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_WSInitialRORequest, (void*)Axis_Delete_WSInitialRORequest, "message", Axis_URI_WSInitialRORequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("initialROResponse", "http://ws.omadrm.mutable.com"))
			{
				pReturn = (WSROAcquisitionTrigger*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_WSROAcquisitionTrigger, (void*) Axis_Create_WSROAcquisitionTrigger, (void*) Axis_Delete_WSROAcquisitionTrigger,"message", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
		throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault","http://localhost:8080/OMADRMWS/services/OMADRMWebService" );
		if(pSoapFault)
		{
			m_pCall->unInitialize();
			throw SoapFaultException(e);
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method roAcquisition
 */
WSROResponse* OMADRMWS::roAcquisition(WSRORequest* Value0)
{
	WSROResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("roAcquisition", "http://ws.omadrm.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_WSRORequest, (void*)Axis_Delete_WSRORequest, "message", Axis_URI_WSRORequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("roAcquisitionResponse", "http://ws.omadrm.mutable.com"))
			{
				pReturn = (WSROResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_WSROResponse, (void*) Axis_Create_WSROResponse, (void*) Axis_Delete_WSROResponse,"message", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
		throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault","http://localhost:8080/OMADRMWS/services/OMADRMWebService" );
		if(pSoapFault)
		{
			m_pCall->unInitialize();
			throw SoapFaultException(e);
		}
		else throw;
*/
	}
}

