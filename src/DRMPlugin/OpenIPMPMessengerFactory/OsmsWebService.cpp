/**	\file OsmsWebService.cpp

	Osms web service C++ stub.<br>

    The Initial Developer of the Original Code is Mutable, Inc. <br>
    Portions created by Mutable, Inc. are <br>
    Copyright (C) Mutable, Inc. 2002-2006.  All Rights Reserved. <p>

    Portions of this file were auto-generated by the Axis C++ 
	Web Service Generator (WSDL2Ws).<p>
	
*/

#include "OsmsWebService.hpp"

#include <string>
#include <axis/AxisWrapperAPI.hpp>

using namespace std;

extern int Axis_DeSerialize_OsmsRegisterContentAssignIdentifierResponse(OsmsRegisterContentAssignIdentifierResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterContentAssignIdentifierResponse(OsmsRegisterContentAssignIdentifierResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterContentAssignIdentifierResponse(OsmsRegisterContentAssignIdentifierResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterContentAssignIdentifierResponse(OsmsRegisterContentAssignIdentifierResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterContentAssignIdentifierResponse();

extern int Axis_DeSerialize_OsmsUserLoginRequest(OsmsUserLoginRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsUserLoginRequest(OsmsUserLoginRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsUserLoginRequest(OsmsUserLoginRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsUserLoginRequest(OsmsUserLoginRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsUserLoginRequest();

extern int Axis_DeSerialize_OsmsRegisterDigitalItemInstanceRequest(OsmsRegisterDigitalItemInstanceRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterDigitalItemInstanceRequest(OsmsRegisterDigitalItemInstanceRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterDigitalItemInstanceRequest(OsmsRegisterDigitalItemInstanceRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterDigitalItemInstanceRequest(OsmsRegisterDigitalItemInstanceRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterDigitalItemInstanceRequest();

extern int Axis_DeSerialize_OsmsUserLoginFault(OsmsUserLoginFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsUserLoginFault(OsmsUserLoginFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsUserLoginFault(OsmsUserLoginFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsUserLoginFault(OsmsUserLoginFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsUserLoginFault();

extern int Axis_DeSerialize_OsmsGetContentKeyResponse(OsmsGetContentKeyResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsGetContentKeyResponse(OsmsGetContentKeyResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsGetContentKeyResponse(OsmsGetContentKeyResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsGetContentKeyResponse(OsmsGetContentKeyResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsGetContentKeyResponse();

extern int Axis_DeSerialize_OsmsRegisterDigitalItemInstanceFault(OsmsRegisterDigitalItemInstanceFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterDigitalItemInstanceFault(OsmsRegisterDigitalItemInstanceFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterDigitalItemInstanceFault(OsmsRegisterDigitalItemInstanceFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterDigitalItemInstanceFault(OsmsRegisterDigitalItemInstanceFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterDigitalItemInstanceFault();

extern int Axis_DeSerialize_OsmsQueryResponse(OsmsQueryResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsQueryResponse(OsmsQueryResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsQueryResponse(OsmsQueryResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsQueryResponse(OsmsQueryResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsQueryResponse();

extern int Axis_DeSerialize_OsmsUserLogoutResponse(OsmsUserLogoutResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsUserLogoutResponse(OsmsUserLogoutResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsUserLogoutResponse(OsmsUserLogoutResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsUserLogoutResponse(OsmsUserLogoutResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsUserLogoutResponse();

extern int Axis_DeSerialize_OsmsUserLogoutRequest(OsmsUserLogoutRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsUserLogoutRequest(OsmsUserLogoutRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsUserLogoutRequest(OsmsUserLogoutRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsUserLogoutRequest(OsmsUserLogoutRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsUserLogoutRequest();

extern int Axis_DeSerialize_OsmsUserLogoutFault(OsmsUserLogoutFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsUserLogoutFault(OsmsUserLogoutFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsUserLogoutFault(OsmsUserLogoutFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsUserLogoutFault(OsmsUserLogoutFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsUserLogoutFault();

extern int Axis_DeSerialize_OsmsRightsAuthorizationFault(OsmsRightsAuthorizationFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRightsAuthorizationFault(OsmsRightsAuthorizationFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRightsAuthorizationFault(OsmsRightsAuthorizationFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRightsAuthorizationFault(OsmsRightsAuthorizationFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRightsAuthorizationFault();

extern int Axis_DeSerialize_OsmsRegisterContentAssignIdentifierFault(OsmsRegisterContentAssignIdentifierFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterContentAssignIdentifierFault(OsmsRegisterContentAssignIdentifierFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterContentAssignIdentifierFault(OsmsRegisterContentAssignIdentifierFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterContentAssignIdentifierFault(OsmsRegisterContentAssignIdentifierFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterContentAssignIdentifierFault();

extern int Axis_DeSerialize_OsmsRegisterUserFault(OsmsRegisterUserFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterUserFault(OsmsRegisterUserFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterUserFault(OsmsRegisterUserFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterUserFault(OsmsRegisterUserFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterUserFault();

extern int Axis_DeSerialize_OsmsRegisterContentAssignIdentifierRequest(OsmsRegisterContentAssignIdentifierRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterContentAssignIdentifierRequest(OsmsRegisterContentAssignIdentifierRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterContentAssignIdentifierRequest(OsmsRegisterContentAssignIdentifierRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterContentAssignIdentifierRequest(OsmsRegisterContentAssignIdentifierRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterContentAssignIdentifierRequest();

extern int Axis_DeSerialize_OsmsLicenseFault(OsmsLicenseFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsLicenseFault(OsmsLicenseFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsLicenseFault(OsmsLicenseFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsLicenseFault(OsmsLicenseFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsLicenseFault();

extern int Axis_DeSerialize_OsmsRegisterContentExistingIdentifierResponse(OsmsRegisterContentExistingIdentifierResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterContentExistingIdentifierResponse(OsmsRegisterContentExistingIdentifierResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterContentExistingIdentifierResponse(OsmsRegisterContentExistingIdentifierResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterContentExistingIdentifierResponse(OsmsRegisterContentExistingIdentifierResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterContentExistingIdentifierResponse();

extern int Axis_DeSerialize_OsmsGetContentKeyRequest(OsmsGetContentKeyRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsGetContentKeyRequest(OsmsGetContentKeyRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsGetContentKeyRequest(OsmsGetContentKeyRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsGetContentKeyRequest(OsmsGetContentKeyRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsGetContentKeyRequest();

extern int Axis_DeSerialize_OsmsQueryRequest(OsmsQueryRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsQueryRequest(OsmsQueryRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsQueryRequest(OsmsQueryRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsQueryRequest(OsmsQueryRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsQueryRequest();

extern int Axis_DeSerialize_OsmsRegisterContentExistingIdentifierRequest(OsmsRegisterContentExistingIdentifierRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterContentExistingIdentifierRequest(OsmsRegisterContentExistingIdentifierRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterContentExistingIdentifierRequest(OsmsRegisterContentExistingIdentifierRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterContentExistingIdentifierRequest(OsmsRegisterContentExistingIdentifierRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterContentExistingIdentifierRequest();

extern int Axis_DeSerialize_OsmsUserLoginResponse(OsmsUserLoginResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsUserLoginResponse(OsmsUserLoginResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsUserLoginResponse(OsmsUserLoginResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsUserLoginResponse(OsmsUserLoginResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsUserLoginResponse();

extern int Axis_DeSerialize_OsmsLicenseResponse(OsmsLicenseResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsLicenseResponse(OsmsLicenseResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsLicenseResponse(OsmsLicenseResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsLicenseResponse(OsmsLicenseResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsLicenseResponse();

extern int Axis_DeSerialize_OsmsRegisterUserRequest(OsmsRegisterUserRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterUserRequest(OsmsRegisterUserRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterUserRequest(OsmsRegisterUserRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterUserRequest(OsmsRegisterUserRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterUserRequest();

extern int Axis_DeSerialize_OsmsRegisterDigitalItemInstanceResponse(OsmsRegisterDigitalItemInstanceResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterDigitalItemInstanceResponse(OsmsRegisterDigitalItemInstanceResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterDigitalItemInstanceResponse(OsmsRegisterDigitalItemInstanceResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterDigitalItemInstanceResponse(OsmsRegisterDigitalItemInstanceResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterDigitalItemInstanceResponse();

extern int Axis_DeSerialize_OsmsGetContentKeyFault(OsmsGetContentKeyFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsGetContentKeyFault(OsmsGetContentKeyFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsGetContentKeyFault(OsmsGetContentKeyFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsGetContentKeyFault(OsmsGetContentKeyFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsGetContentKeyFault();

extern int Axis_DeSerialize_OsmsRegisterContentExistingIdentifierFault(OsmsRegisterContentExistingIdentifierFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterContentExistingIdentifierFault(OsmsRegisterContentExistingIdentifierFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterContentExistingIdentifierFault(OsmsRegisterContentExistingIdentifierFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterContentExistingIdentifierFault(OsmsRegisterContentExistingIdentifierFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterContentExistingIdentifierFault();

extern int Axis_DeSerialize_OsmsCreateUserFault(OsmsCreateUserFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsCreateUserFault(OsmsCreateUserFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsCreateUserFault(OsmsCreateUserFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsCreateUserFault(OsmsCreateUserFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsCreateUserFault();

extern int Axis_DeSerialize_OsmsCreateUserResponse(OsmsCreateUserResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsCreateUserResponse(OsmsCreateUserResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsCreateUserResponse(OsmsCreateUserResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsCreateUserResponse(OsmsCreateUserResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsCreateUserResponse();

extern int Axis_DeSerialize_OsmsCreateUserRequest(OsmsCreateUserRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsCreateUserRequest(OsmsCreateUserRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsCreateUserRequest(OsmsCreateUserRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsCreateUserRequest(OsmsCreateUserRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsCreateUserRequest();

extern int Axis_DeSerialize_OsmsQueryFault(OsmsQueryFault* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsQueryFault(OsmsQueryFault *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsQueryFault(OsmsQueryFault* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsQueryFault(OsmsQueryFault* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsQueryFault();

extern int Axis_DeSerialize_OsmsRegisterUserResponse(OsmsRegisterUserResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRegisterUserResponse(OsmsRegisterUserResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRegisterUserResponse(OsmsRegisterUserResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRegisterUserResponse(OsmsRegisterUserResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRegisterUserResponse();

extern int Axis_DeSerialize_OsmsRightsAuthorizationResponse(OsmsRightsAuthorizationResponse* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRightsAuthorizationResponse(OsmsRightsAuthorizationResponse *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRightsAuthorizationResponse(OsmsRightsAuthorizationResponse* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRightsAuthorizationResponse(OsmsRightsAuthorizationResponse* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRightsAuthorizationResponse();

extern int Axis_DeSerialize_OsmsLicenseRequest(OsmsLicenseRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsLicenseRequest(OsmsLicenseRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsLicenseRequest(OsmsLicenseRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsLicenseRequest(OsmsLicenseRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsLicenseRequest();

extern int Axis_DeSerialize_OsmsRightsAuthorizationRequest(OsmsRightsAuthorizationRequest* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_OsmsRightsAuthorizationRequest(OsmsRightsAuthorizationRequest *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_OsmsRightsAuthorizationRequest(OsmsRightsAuthorizationRequest* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_OsmsRightsAuthorizationRequest(OsmsRightsAuthorizationRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_OsmsRightsAuthorizationRequest();

OsmsWebService::OsmsWebService(const char* pchEndpointUri, AXIS_PROTOCOL_TYPE eProtocol)
:Stub(pchEndpointUri, eProtocol)
{
}

OsmsWebService::OsmsWebService()
:Stub(" ", APTHTTP1_1)
{
	serviceEndpoint = "http://localhost:8080/openipmp/services/OsmsWebService"; // default URI
	m_pCall->setEndpointURI(serviceEndpoint.c_str());
}

OsmsWebService::~OsmsWebService()
{
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service method query
 */
OsmsQueryResponse* OsmsWebService::query(OsmsQueryRequest* Value0)
{
	OsmsQueryResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("query", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsQueryRequest, (void*)Axis_Delete_OsmsQueryRequest, "msg", Axis_URI_OsmsQueryRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("queryResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsQueryResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsQueryResponse, (void*) Axis_Create_OsmsQueryResponse, (void*) Axis_Delete_OsmsQueryResponse,"queryReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsUserLoginFault", pcCmplxFaultName))
			{
				OsmsUserLoginFault* pFaultDetail = 
					(OsmsUserLoginFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLoginFault,
						(void*) Axis_Create_OsmsUserLoginFault,
						(void*) Axis_Delete_OsmsUserLoginFault,
						"OsmsUserLoginFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else if(0 == strcmp("OsmsQueryFault", pcCmplxFaultName))
			{
				OsmsQueryFault* pFaultDetail = 
					(OsmsQueryFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsQueryFault,
						(void*) Axis_Create_OsmsQueryFault,
						(void*) Axis_Delete_OsmsQueryFault,
						"OsmsQueryFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method license
 */
OsmsLicenseResponse* OsmsWebService::license(OsmsLicenseRequest* Value0)
{
	OsmsLicenseResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("license", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsLicenseRequest, (void*)Axis_Delete_OsmsLicenseRequest, "msg", Axis_URI_OsmsLicenseRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("licenseResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsLicenseResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsLicenseResponse, (void*) Axis_Create_OsmsLicenseResponse, (void*) Axis_Delete_OsmsLicenseResponse,"licenseReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsLicenseFault", pcCmplxFaultName))
			{
				OsmsLicenseFault* pFaultDetail = 
					(OsmsLicenseFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsLicenseFault,
						(void*) Axis_Create_OsmsLicenseFault,
						(void*) Axis_Delete_OsmsLicenseFault,
						"OsmsLicenseFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else if(0 == strcmp("OsmsUserLoginFault", pcCmplxFaultName))
			{
				OsmsUserLoginFault* pFaultDetail = 
					(OsmsUserLoginFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLoginFault,
						(void*) Axis_Create_OsmsUserLoginFault,
						(void*) Axis_Delete_OsmsUserLoginFault,
						"OsmsUserLoginFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method userLogin
 */
OsmsUserLoginResponse* OsmsWebService::userLogin(OsmsUserLoginRequest* Value0)
{
	OsmsUserLoginResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("userLogin", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsUserLoginRequest, (void*)Axis_Delete_OsmsUserLoginRequest, "msg", Axis_URI_OsmsUserLoginRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("userLoginResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsUserLoginResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsUserLoginResponse, (void*) Axis_Create_OsmsUserLoginResponse, (void*) Axis_Delete_OsmsUserLoginResponse,"userLoginReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsUserLoginFault", pcCmplxFaultName))
			{
				OsmsUserLoginFault* pFaultDetail = 
					(OsmsUserLoginFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLoginFault,
						(void*) Axis_Create_OsmsUserLoginFault,
						(void*) Axis_Delete_OsmsUserLoginFault,
						"OsmsUserLoginFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method userLogout
 */
OsmsUserLogoutResponse* OsmsWebService::userLogout(OsmsUserLogoutRequest* Value0)
{
	OsmsUserLogoutResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("userLogout", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsUserLogoutRequest, (void*)Axis_Delete_OsmsUserLogoutRequest, "msg", Axis_URI_OsmsUserLogoutRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("userLogoutResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsUserLogoutResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsUserLogoutResponse, (void*) Axis_Create_OsmsUserLogoutResponse, (void*) Axis_Delete_OsmsUserLogoutResponse,"userLogoutReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsUserLoginFault", pcCmplxFaultName))
			{
				OsmsUserLoginFault* pFaultDetail = 
					(OsmsUserLoginFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLoginFault,
						(void*) Axis_Create_OsmsUserLoginFault,
						(void*) Axis_Delete_OsmsUserLoginFault,
						"OsmsUserLoginFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else if(0 == strcmp("OsmsUserLogoutFault", pcCmplxFaultName))
			{
				OsmsUserLogoutFault* pFaultDetail = 
					(OsmsUserLogoutFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLogoutFault,
						(void*) Axis_Create_OsmsUserLogoutFault,
						(void*) Axis_Delete_OsmsUserLogoutFault,
						"OsmsUserLogoutFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method createUser
 */
OsmsCreateUserResponse* OsmsWebService::createUser(OsmsCreateUserRequest* Value0)
{
	OsmsCreateUserResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("createUser", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsCreateUserRequest, (void*)Axis_Delete_OsmsCreateUserRequest, "msg", Axis_URI_OsmsCreateUserRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("createUserResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsCreateUserResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsCreateUserResponse, (void*) Axis_Create_OsmsCreateUserResponse, (void*) Axis_Delete_OsmsCreateUserResponse,"createUserReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsCreateUserFault", pcCmplxFaultName))
			{
				OsmsCreateUserFault* pFaultDetail = 
					(OsmsCreateUserFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsCreateUserFault,
						(void*) Axis_Create_OsmsCreateUserFault,
						(void*) Axis_Delete_OsmsCreateUserFault,
						"OsmsCreateUserFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method getContentKey
 */
OsmsGetContentKeyResponse* OsmsWebService::getContentKey(OsmsGetContentKeyRequest* Value0)
{
	OsmsGetContentKeyResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("getContentKey", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsGetContentKeyRequest, (void*)Axis_Delete_OsmsGetContentKeyRequest, "msg", Axis_URI_OsmsGetContentKeyRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("getContentKeyResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsGetContentKeyResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsGetContentKeyResponse, (void*) Axis_Create_OsmsGetContentKeyResponse, (void*) Axis_Delete_OsmsGetContentKeyResponse,"getContentKeyReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsGetContentKeyFault", pcCmplxFaultName))
			{
				OsmsGetContentKeyFault* pFaultDetail = 
					(OsmsGetContentKeyFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsGetContentKeyFault,
						(void*) Axis_Create_OsmsGetContentKeyFault,
						(void*) Axis_Delete_OsmsGetContentKeyFault,
						"OsmsGetContentKeyFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else if(0 == strcmp("OsmsUserLoginFault", pcCmplxFaultName))
			{
				OsmsUserLoginFault* pFaultDetail = 
					(OsmsUserLoginFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLoginFault,
						(void*) Axis_Create_OsmsUserLoginFault,
						(void*) Axis_Delete_OsmsUserLoginFault,
						"OsmsUserLoginFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method registerContentAssignIdentifier
 */
OsmsRegisterContentAssignIdentifierResponse* OsmsWebService::registerContentAssignIdentifier(OsmsRegisterContentAssignIdentifierRequest* Value0)
{
	OsmsRegisterContentAssignIdentifierResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("registerContentAssignIdentifier", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsRegisterContentAssignIdentifierRequest, (void*)Axis_Delete_OsmsRegisterContentAssignIdentifierRequest, "msg", Axis_URI_OsmsRegisterContentAssignIdentifierRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("registerContentAssignIdentifierResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsRegisterContentAssignIdentifierResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsRegisterContentAssignIdentifierResponse, (void*) Axis_Create_OsmsRegisterContentAssignIdentifierResponse, (void*) Axis_Delete_OsmsRegisterContentAssignIdentifierResponse,"registerContentAssignIdentifierReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsRegisterContentAssignIdentifierFault", pcCmplxFaultName))
			{
				OsmsRegisterContentAssignIdentifierFault* pFaultDetail = 
					(OsmsRegisterContentAssignIdentifierFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsRegisterContentAssignIdentifierFault,
						(void*) Axis_Create_OsmsRegisterContentAssignIdentifierFault,
						(void*) Axis_Delete_OsmsRegisterContentAssignIdentifierFault,
						"OsmsRegisterContentAssignIdentifierFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else if(0 == strcmp("OsmsUserLoginFault", pcCmplxFaultName))
			{
				OsmsUserLoginFault* pFaultDetail = 
					(OsmsUserLoginFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLoginFault,
						(void*) Axis_Create_OsmsUserLoginFault,
						(void*) Axis_Delete_OsmsUserLoginFault,
						"OsmsUserLoginFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method registerContentExistingIdentifier
 */
OsmsRegisterContentExistingIdentifierResponse* OsmsWebService::registerContentExistingIdentifier(OsmsRegisterContentExistingIdentifierRequest* Value0)
{
	OsmsRegisterContentExistingIdentifierResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("registerContentExistingIdentifier", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsRegisterContentExistingIdentifierRequest, (void*)Axis_Delete_OsmsRegisterContentExistingIdentifierRequest, "msg", Axis_URI_OsmsRegisterContentExistingIdentifierRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("registerContentExistingIdentifierResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsRegisterContentExistingIdentifierResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsRegisterContentExistingIdentifierResponse, (void*) Axis_Create_OsmsRegisterContentExistingIdentifierResponse, (void*) Axis_Delete_OsmsRegisterContentExistingIdentifierResponse,"registerContentExistingIdentifierReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsUserLoginFault", pcCmplxFaultName))
			{
				OsmsUserLoginFault* pFaultDetail = 
					(OsmsUserLoginFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLoginFault,
						(void*) Axis_Create_OsmsUserLoginFault,
						(void*) Axis_Delete_OsmsUserLoginFault,
						"OsmsUserLoginFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else if(0 == strcmp("OsmsRegisterContentExistingIdentifierFault", pcCmplxFaultName))
			{
				OsmsRegisterContentExistingIdentifierFault* pFaultDetail = 
					(OsmsRegisterContentExistingIdentifierFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsRegisterContentExistingIdentifierFault,
						(void*) Axis_Create_OsmsRegisterContentExistingIdentifierFault,
						(void*) Axis_Delete_OsmsRegisterContentExistingIdentifierFault,
						"OsmsRegisterContentExistingIdentifierFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method registerDigitalItemInstance
 */
OsmsRegisterDigitalItemInstanceResponse* OsmsWebService::registerDigitalItemInstance(OsmsRegisterDigitalItemInstanceRequest* Value0)
{
	OsmsRegisterDigitalItemInstanceResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("registerDigitalItemInstance", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsRegisterDigitalItemInstanceRequest, (void*)Axis_Delete_OsmsRegisterDigitalItemInstanceRequest, "msg", Axis_URI_OsmsRegisterDigitalItemInstanceRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("registerDigitalItemInstanceResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsRegisterDigitalItemInstanceResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsRegisterDigitalItemInstanceResponse, (void*) Axis_Create_OsmsRegisterDigitalItemInstanceResponse, (void*) Axis_Delete_OsmsRegisterDigitalItemInstanceResponse,"registerDigitalItemInstanceReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsUserLoginFault", pcCmplxFaultName))
			{
				OsmsUserLoginFault* pFaultDetail = 
					(OsmsUserLoginFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLoginFault,
						(void*) Axis_Create_OsmsUserLoginFault,
						(void*) Axis_Delete_OsmsUserLoginFault,
						"OsmsUserLoginFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else if(0 == strcmp("OsmsRegisterDigitalItemInstanceFault", pcCmplxFaultName))
			{
				OsmsRegisterDigitalItemInstanceFault* pFaultDetail = 
					(OsmsRegisterDigitalItemInstanceFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsRegisterDigitalItemInstanceFault,
						(void*) Axis_Create_OsmsRegisterDigitalItemInstanceFault,
						(void*) Axis_Delete_OsmsRegisterDigitalItemInstanceFault,
						"OsmsRegisterDigitalItemInstanceFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method registerUser
 */
OsmsRegisterUserResponse* OsmsWebService::registerUser(OsmsRegisterUserRequest* Value0)
{
	OsmsRegisterUserResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("registerUser", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsRegisterUserRequest, (void*)Axis_Delete_OsmsRegisterUserRequest, "msg", Axis_URI_OsmsRegisterUserRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("registerUserResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsRegisterUserResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsRegisterUserResponse, (void*) Axis_Create_OsmsRegisterUserResponse, (void*) Axis_Delete_OsmsRegisterUserResponse,"registerUserReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsRegisterUserFault", pcCmplxFaultName))
			{
				OsmsRegisterUserFault* pFaultDetail = 
					(OsmsRegisterUserFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsRegisterUserFault,
						(void*) Axis_Create_OsmsRegisterUserFault,
						(void*) Axis_Delete_OsmsRegisterUserFault,
						"OsmsRegisterUserFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


/*
 * This method wrap the service method rightsAuthorization
 */
OsmsRightsAuthorizationResponse* OsmsWebService::rightsAuthorization(OsmsRightsAuthorizationRequest* Value0)
{
	OsmsRightsAuthorizationResponse* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER)) 
			return pReturn;
	if (NULL==m_pCall->getTransportProperty("SOAPAction",false))
	{
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
	}
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("rightsAuthorization", "http://ws.server.osms.mutable.com");
		applyUserPreferences();
	m_pCall->addCmplxParameter(Value0, (void*)Axis_Serialize_OsmsRightsAuthorizationRequest, (void*)Axis_Delete_OsmsRightsAuthorizationRequest, "msg", Axis_URI_OsmsRightsAuthorizationRequest);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("rightsAuthorizationResponse", "http://ws.server.osms.mutable.com"))
			{
				pReturn = (OsmsRightsAuthorizationResponse*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_OsmsRightsAuthorizationResponse, (void*) Axis_Create_OsmsRightsAuthorizationResponse, (void*) Axis_Delete_OsmsRightsAuthorizationResponse,"rightsAuthorizationReturn", 0);
		}
		}
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		m_pCall->unInitialize();
    throw SoapFaultException(e);
/*
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			throw SoapFaultException(e);
		}
		ISoapFault* pSoapFault = (ISoapFault*)
			m_pCall->checkFault("Fault", serviceEndpoint.c_str());
		if(pSoapFault)
		{
			pcCmplxFaultName = pSoapFault->getCmplxFaultObjectName();
			if(0 == strcmp("OsmsUserLoginFault", pcCmplxFaultName))
			{
				OsmsUserLoginFault* pFaultDetail = 
					(OsmsUserLoginFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsUserLoginFault,
						(void*) Axis_Create_OsmsUserLoginFault,
						(void*) Axis_Delete_OsmsUserLoginFault,
						"OsmsUserLoginFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else if(0 == strcmp("OsmsRightsAuthorizationFault", pcCmplxFaultName))
			{
				OsmsRightsAuthorizationFault* pFaultDetail = 
					(OsmsRightsAuthorizationFault*)pSoapFault->getCmplxFaultObject(
						(void*) Axis_DeSerialize_OsmsRightsAuthorizationFault,
						(void*) Axis_Create_OsmsRightsAuthorizationFault,
						(void*) Axis_Delete_OsmsRightsAuthorizationFault,
						"OsmsRightsAuthorizationFault",
						0);

				pFaultDetail->setFaultCode(pSoapFault->getFaultcode());
				pFaultDetail->setFaultString(pSoapFault->getFaultstring());
				pFaultDetail->setFaultActor(pSoapFault->getFaultactor());
				pFaultDetail->setExceptionCode(e.getExceptionCode());
				m_pCall->unInitialize();
				throw *pFaultDetail;
			}
			else
			{
				m_pCall->unInitialize();
				throw SoapFaultException(e);
			}
		}
		else throw;
*/
	}
}


void OsmsWebService::setServiceEndpoint(const std::string& uri) {
    serviceEndpoint = uri;
	m_pCall->setEndpointURI(serviceEndpoint.c_str());
}

std::string OsmsWebService::getServiceEndpoint() {
	return serviceEndpoint;
}
