/*
 * Copyright 2003-2004 The Apache Software Foundation.

 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains functions to manipulate complex type OsmsCreateUserRequest
 */

#include "OsmsCreateUserRequest.hpp"
#include <axis/AxisWrapperAPI.hpp>

/*
 * This static method serialize a OsmsCreateUserRequest type of object
 */
int Axis_Serialize_OsmsCreateUserRequest(OsmsCreateUserRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false)
{
	if (bArray)
	{
		pSZ->serialize("<", Axis_TypeName_OsmsCreateUserRequest, ">", NULL);
	}
	else
	{
		bool blnIsNewPrefix = false;
		const AxisChar* sPrefix = pSZ->getNamespacePrefix(Axis_URI_OsmsCreateUserRequest, blnIsNewPrefix);
		if (!blnIsNewPrefix)
		{
			pSZ->serialize("<", Axis_TypeName_OsmsCreateUserRequest, " xsi:type=\"", sPrefix, ":",
				Axis_TypeName_OsmsCreateUserRequest, "\">", NULL);
		}
		else
		{
			pSZ->serialize("<", Axis_TypeName_OsmsCreateUserRequest, " xsi:type=\"", sPrefix, ":",
				Axis_TypeName_OsmsCreateUserRequest, "\" xmlns:", sPrefix, "=\"",
				Axis_URI_OsmsCreateUserRequest, "\">", NULL);
		}
	}

	pSZ->serializeAsElement("addressLine1", (void*)(param->addressLine1), XSD_STRING);
	pSZ->serializeAsElement("addressLine2", (void*)(param->addressLine2), XSD_STRING);
	pSZ->serializeAsElement("addressLine3", (void*)(param->addressLine3), XSD_STRING);
	pSZ->serializeAsElement("altPhoneNumber", (void*)(param->altPhoneNumber), XSD_STRING);
	pSZ->serializeAsElement("city", (void*)(param->city), XSD_STRING);
	pSZ->serializeAsElement("country", (void*)(param->country), XSD_STRING);
	pSZ->serializeAsElement("emailAddress", (void*)(param->emailAddress), XSD_STRING);
	pSZ->serializeAsElement("faxPhoneNumber", (void*)(param->faxPhoneNumber), XSD_STRING);
	pSZ->serializeAsElement("firstName", (void*)(param->firstName), XSD_STRING);
	pSZ->serializeAsElement("lastName", (void*)(param->lastName), XSD_STRING);
	pSZ->serializeAsElement("mainPhoneNumber", (void*)(param->mainPhoneNumber), XSD_STRING);
	pSZ->serializeAsElement("organizationName", (void*)(param->organizationName), XSD_STRING);
	pSZ->serializeAsElement("organizationUnit", (void*)(param->organizationUnit), XSD_STRING);
	pSZ->serializeAsElement("password", (void*)(param->password), XSD_STRING);
	pSZ->serializeAsElement("salutation", (void*)(param->salutation), XSD_STRING);
	pSZ->serializeAsElement("secretAnswer", (void*)(param->secretAnswer), XSD_STRING);
	pSZ->serializeAsElement("secretQuestion", (void*)(param->secretQuestion), XSD_STRING);
	pSZ->serializeAsElement("state", (void*)(param->state), XSD_STRING);
	pSZ->serializeAsElement("suffix", (void*)(param->suffix), XSD_STRING);
	pSZ->serializeAsElement("userName", (void*)(param->userName), XSD_STRING);
	pSZ->serializeAsElement("zipCode", (void*)(param->zipCode), XSD_STRING);

	pSZ->serialize("</", Axis_TypeName_OsmsCreateUserRequest, ">", NULL);
	return AXIS_SUCCESS;
}

/*
 * This static method deserialize a OsmsCreateUserRequest type of object
 */
int Axis_DeSerialize_OsmsCreateUserRequest(OsmsCreateUserRequest* param, IWrapperSoapDeSerializer* pIWSDZ)
{
	param->addressLine1 = pIWSDZ->getElementAsString("addressLine1",0);
	param->addressLine2 = pIWSDZ->getElementAsString("addressLine2",0);
	param->addressLine3 = pIWSDZ->getElementAsString("addressLine3",0);
	param->altPhoneNumber = pIWSDZ->getElementAsString("altPhoneNumber",0);
	param->city = pIWSDZ->getElementAsString("city",0);
	param->country = pIWSDZ->getElementAsString("country",0);
	param->emailAddress = pIWSDZ->getElementAsString("emailAddress",0);
	param->faxPhoneNumber = pIWSDZ->getElementAsString("faxPhoneNumber",0);
	param->firstName = pIWSDZ->getElementAsString("firstName",0);
	param->lastName = pIWSDZ->getElementAsString("lastName",0);
	param->mainPhoneNumber = pIWSDZ->getElementAsString("mainPhoneNumber",0);
	param->organizationName = pIWSDZ->getElementAsString("organizationName",0);
	param->organizationUnit = pIWSDZ->getElementAsString("organizationUnit",0);
	param->password = pIWSDZ->getElementAsString("password",0);
	param->salutation = pIWSDZ->getElementAsString("salutation",0);
	param->secretAnswer = pIWSDZ->getElementAsString("secretAnswer",0);
	param->secretQuestion = pIWSDZ->getElementAsString("secretQuestion",0);
	param->state = pIWSDZ->getElementAsString("state",0);
	param->suffix = pIWSDZ->getElementAsString("suffix",0);
	param->userName = pIWSDZ->getElementAsString("userName",0);
	param->zipCode = pIWSDZ->getElementAsString("zipCode",0);
	return pIWSDZ->getStatus();
}
void* Axis_Create_OsmsCreateUserRequest(OsmsCreateUserRequest* pObj, bool bArray = false, int nSize=0)
{
	if (bArray && (nSize > 0))
	{
		if (pObj)
		{
			OsmsCreateUserRequest* pNew = new OsmsCreateUserRequest[nSize];
			memcpy(pNew, pObj, sizeof(OsmsCreateUserRequest)*nSize/2);
			memset(pObj, 0, sizeof(OsmsCreateUserRequest)*nSize/2);
			delete [] pObj;
			return pNew;
		}
		else
		{
			return new OsmsCreateUserRequest[nSize];
		}
	}
	else
		return new OsmsCreateUserRequest;
}

/*
 * This static method delete a OsmsCreateUserRequest type of object
 */
void Axis_Delete_OsmsCreateUserRequest(OsmsCreateUserRequest* param, bool bArray = false, int nSize=0)
{
	if (bArray)
	{
		delete [] param;
	}
	else
	{
		delete param;
	}
}
/*
 * This static method gives the size of OsmsCreateUserRequest type of object
 */
int Axis_GetSize_OsmsCreateUserRequest()
{
	return sizeof(OsmsCreateUserRequest);
}

OsmsCreateUserRequest::OsmsCreateUserRequest()
{
	/*do not allocate memory to any pointer members here
	 because deserializer will allocate memory anyway. */
	memset( &addressLine1, 0, sizeof( xsd__string));
	memset( &addressLine2, 0, sizeof( xsd__string));
	memset( &addressLine3, 0, sizeof( xsd__string));
	memset( &altPhoneNumber, 0, sizeof( xsd__string));
	memset( &city, 0, sizeof( xsd__string));
	memset( &country, 0, sizeof( xsd__string));
	memset( &emailAddress, 0, sizeof( xsd__string));
	memset( &faxPhoneNumber, 0, sizeof( xsd__string));
	memset( &firstName, 0, sizeof( xsd__string));
	memset( &lastName, 0, sizeof( xsd__string));
	memset( &mainPhoneNumber, 0, sizeof( xsd__string));
	memset( &organizationName, 0, sizeof( xsd__string));
	memset( &organizationUnit, 0, sizeof( xsd__string));
	memset( &password, 0, sizeof( xsd__string));
	memset( &salutation, 0, sizeof( xsd__string));
	memset( &secretAnswer, 0, sizeof( xsd__string));
	memset( &secretQuestion, 0, sizeof( xsd__string));
	memset( &state, 0, sizeof( xsd__string));
	memset( &suffix, 0, sizeof( xsd__string));
	memset( &userName, 0, sizeof( xsd__string));
	memset( &zipCode, 0, sizeof( xsd__string));
}

OsmsCreateUserRequest::~OsmsCreateUserRequest()
{
	/*delete any pointer and array members here*/
}
