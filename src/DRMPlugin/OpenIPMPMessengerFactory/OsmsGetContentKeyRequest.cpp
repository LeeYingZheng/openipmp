/*
 * Copyright 2003-2004 The Apache Software Foundation.

 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains functions to manipulate complex type OsmsGetContentKeyRequest
 */

#include "OsmsGetContentKeyRequest.hpp"
#include <axis/AxisWrapperAPI.hpp>

/*
 * This static method serialize a OsmsGetContentKeyRequest type of object
 */
int Axis_Serialize_OsmsGetContentKeyRequest(OsmsGetContentKeyRequest* param, IWrapperSoapSerializer* pSZ, bool bArray = false)
{
	if (bArray)
	{
		pSZ->serialize("<", Axis_TypeName_OsmsGetContentKeyRequest, ">", NULL);
	}
	else
	{
		bool blnIsNewPrefix = false;
		const AxisChar* sPrefix = pSZ->getNamespacePrefix(Axis_URI_OsmsGetContentKeyRequest, blnIsNewPrefix);
		if (!blnIsNewPrefix)
		{
			pSZ->serialize("<", Axis_TypeName_OsmsGetContentKeyRequest, " xsi:type=\"", sPrefix, ":",
				Axis_TypeName_OsmsGetContentKeyRequest, "\">", NULL);
		}
		else
		{
			pSZ->serialize("<", Axis_TypeName_OsmsGetContentKeyRequest, " xsi:type=\"", sPrefix, ":",
				Axis_TypeName_OsmsGetContentKeyRequest, "\" xmlns:", sPrefix, "=\"",
				Axis_URI_OsmsGetContentKeyRequest, "\">", NULL);
		}
	}

	pSZ->serializeAsElement("digitalItemInstanceId", (void*)(param->digitalItemInstanceId), XSD_STRING);
	pSZ->serializeAsElement("metadataType", (void*)(param->metadataType), XSD_STRING);

	pSZ->serialize("</", Axis_TypeName_OsmsGetContentKeyRequest, ">", NULL);
	return AXIS_SUCCESS;
}

/*
 * This static method deserialize a OsmsGetContentKeyRequest type of object
 */
int Axis_DeSerialize_OsmsGetContentKeyRequest(OsmsGetContentKeyRequest* param, IWrapperSoapDeSerializer* pIWSDZ)
{
	param->digitalItemInstanceId = pIWSDZ->getElementAsString("digitalItemInstanceId",0);
	param->metadataType = pIWSDZ->getElementAsString("metadataType",0);
	return pIWSDZ->getStatus();
}
void* Axis_Create_OsmsGetContentKeyRequest(OsmsGetContentKeyRequest* pObj, bool bArray = false, int nSize=0)
{
	if (bArray && (nSize > 0))
	{
		if (pObj)
		{
			OsmsGetContentKeyRequest* pNew = new OsmsGetContentKeyRequest[nSize];
			memcpy(pNew, pObj, sizeof(OsmsGetContentKeyRequest)*nSize/2);
			memset(pObj, 0, sizeof(OsmsGetContentKeyRequest)*nSize/2);
			delete [] pObj;
			return pNew;
		}
		else
		{
			return new OsmsGetContentKeyRequest[nSize];
		}
	}
	else
		return new OsmsGetContentKeyRequest;
}

/*
 * This static method delete a OsmsGetContentKeyRequest type of object
 */
void Axis_Delete_OsmsGetContentKeyRequest(OsmsGetContentKeyRequest* param, bool bArray = false, int nSize=0)
{
	if (bArray)
	{
		delete [] param;
	}
	else
	{
		delete param;
	}
}
/*
 * This static method gives the size of OsmsGetContentKeyRequest type of object
 */
int Axis_GetSize_OsmsGetContentKeyRequest()
{
	return sizeof(OsmsGetContentKeyRequest);
}

OsmsGetContentKeyRequest::OsmsGetContentKeyRequest()
{
	/*do not allocate memory to any pointer members here
	 because deserializer will allocate memory anyway. */
	memset( &digitalItemInstanceId, 0, sizeof( xsd__string));
	memset( &metadataType, 0, sizeof( xsd__string));
}

OsmsGetContentKeyRequest::~OsmsGetContentKeyRequest()
{
	/*delete any pointer and array members here*/
}
